# -*- coding: utf-8 -*-
"""amazon .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Ir5NT7nkgwFa6V7oVxruhdiW9hidJjQ

# **Project Name**    -

**amazon prime Tv shows and Movies**

##### **Project Type**    - EDA
##### **Contribution**    - Individual
##### **Team Member  -**saiprakash

# **Project Summary -**
This project explores the Amazon Prime dataset containing information about TV shows and movies, including details such as titles, cast, directors, genres, countries, release years, and ratings. The main goal of this project is to derive insights and trends from the dataset by cleaning and analyzing the data using Python libraries such as Pandas, Seaborn, and Matplotlib.

# **GitHub Link -**

Import the required Python libraries
"""

# Ensure this cell is executed before any cell that uses 'pd', 'np', 'sns', or 'plt'
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""Read Data"""

# Read Data

data = pd.read_csv('/content/credits.csv.zip')

data = pd.read_csv('/content/titles.csv.zip')

data

"""Dropping the unnecessary columns"""

data.drop(['show_id'], axis = 1, inplace = True)
data.drop(['description'], axis = 1, inplace = True)

""" Checking for duplicated"""

data.duplicated().sum()

"""Get informations about dataset"""

data.info()

"""Describe numaric data"""

data.describe()

"""Describe unnumaric data"""

data.describe(include = object)

""" Checking for total null values"""

data.isna().sum()

"""Fill the null values"""

data['director'].fillna('Unavailable', inplace=True)
data['cast'].fillna('Unavailable', inplace=True)
data['country'].fillna('Unavailable', inplace=True)
data['rating'] = data['rating'].fillna(data['rating'].mode()[0])
data['date_added']= data['date_added'].ffill()

"""Get the summary of dataframe"""

data.head()

data.isnull().sum()

"""changing the datatype of the date and filling the missing values in date column using forward fill"""

data['date_added']= pd.to_datetime(data['date_added'], format='%B %d, %Y')

# Exclude rows where the director is "Unknown"
filtered_directors = data[data['director'] != 'Unavailable']
top_directors = filtered_directors['director'].value_counts().head(10)

# Exclude rows where the cast is "Unknown"
filtered_actors = data[data['cast'] != 'Unavailable']
top_actors = filtered_actors['cast'].value_counts().head(10)

"""Find Top 10 Prolific Actors Excluding Unknown using barplot diagram"""

plt.figure(figsize=(12, 6))
sns.barplot(x=top_actors.values, y=top_actors.index, palette='plasma')
plt.title('Top 10 Prolific Actors (Excluding Unknown)')
plt.xlabel('Number of Movies')
plt.ylabel('Actor')
plt.show()

"""Find Top 10 Genres  using barplot diagram"""

# Top genres
top_genres = data['listed_in'].value_counts().head(10)

# Plot Top Genres
plt.figure(figsize=(12, 6))
sns.barplot(x=top_genres.values, y=top_genres.index, palette='muted')
plt.title('Top 10 Genres')
plt.xlabel('Number of Movies')
plt.ylabel('Genre')
plt.show()

"""Get counts of all values of release_year"""

data['release_year'].value_counts()

"""Using seaborn displot we can see the distribution in years"""

sns.displot(data=data, x='release_year', kind='hist', kde=True,
            color='#fdc100', facecolor='#06837f', edgecolor='#64b6ac', line_kws={'lw': 3}, aspect=3)
plt.title('Number of Films over the years', fontsize=18, weight=600, color='#333d29')

data['type'].value_counts()

""" To know about whether movie is more or TV Show using countplot"""

sns.countplot(data=data,x='type')

df_pie = data['type'].copy().value_counts()
plt.figure(figsize=(6,6))
plt.pie(
    x=df_pie.values,labels=df_pie.index,autopct='%.1f%%',
    wedgeprops={'linewidth':2.0,'edgecolor':'white'}
    )
plt.title('Movie and TV Shows Ratio')
plt.legend(labels=[f"{label} ({count})" for label, count in zip(df_pie.index, df_pie.values)],loc='best')
plt.show()

data['rating'].value_counts()

fig = plt.figure(figsize=(16, 6))

# Create bins for countplot
bins = []
for i in range(1920, 2022, 10):
    if i == 2020:
        i = 2021
    bins.append(i)

df_count = data[['type', 'release_year']].copy()
df_count.loc[:, 'release_year_bins'] = pd.cut(df_count['release_year'], bins)

sns.countplot(data=df_count, x='release_year_bins', hue='type')
plt.xticks(rotation=45)
plt.title('Distribution of Movies and TV Shows per 10 Years')
plt.ylabel('Shows Released')
plt.xlabel('Release Year')
fig.set_tight_layout(True)
plt.show()

plt.figure(figsize=(22,5),dpi = 50)
sns.countplot(data=data,x='rating')

#countplot
data_count1=data['rating'].value_counts().reset_index()
plt.figure(figsize=(16,6))
sns.countplot(x='rating',data=data,hue='type',order=data['rating'].value_counts().index)
plt.xticks(rotation=90)
plt.title('Distribution of show rating')
plt.xlabel('Rating')
plt.ylabel('Number of Shows')
plt.show()

data['director'].value_counts()

data['duration'].unique()

# Filter data for movies and TV shows separately
df_movies = data[data['type'] == 'Movie'].copy()
df_tv_shows = data[data['type'] == 'TV Show'].copy()

# Extract numeric duration for movies
df_movies['duration_num'] = df_movies['duration'].str.extract('(\d+)', expand=False).astype(float)

# Extract numeric duration for TV shows
df_tv_shows['duration_num'] = df_tv_shows['duration'].str.extract('(\d+)', expand=False).astype(float)

# Plotting
plt.figure(figsize=(12, 12))

# Subplot 1: Top 10 Longest Movie Duration
plt.subplot(2, 1, 1)
sns.barplot(data=df_movies.sort_values(by='duration_num', ascending=False).head(10), y='title', x='duration_num', orient='horizontal')
plt.title('Top 10 Longest Movie Durations')
plt.xlabel('Duration (min)')
plt.ylabel('Movie Title')

# Subplot 2: Top 10 TV Shows with the Most Seasons
plt.subplot(2, 1, 2)
sns.barplot(data=df_tv_shows.sort_values(by='duration_num', ascending=False).head(10), y='title', x='duration_num', orient='horizontal')
plt.title('Top 10 TV Shows with the Most Seasons')
plt.xlabel('Number of Seasons')
plt.ylabel('TV Show Title')

plt.tight_layout()
plt.show()

data['country'].value_counts()

filtered_data = data[data['country'] != 'Unavailable']

# Top N countries excluding "unavailable"
top_countries = filtered_data['country'].value_counts().head(50).index

# Filter the data for the top countries
filtered_data = filtered_data[filtered_data['country'].isin(top_countries)]

# Visualize the total shows by country for the top countries
plt.figure(figsize=(22, 11))
sns.countplot(x='country', data=filtered_data, hue='type', order=top_countries, palette='viridis')
plt.title('Total Shows by Top Countries (Excluding "Unavailable")')
plt.xlabel('Country')
plt.ylabel('Number of Shows')
plt.legend(title='Type', loc='upper right')
plt.xticks(rotation=45, ha='right')
plt.show()

plt.figure(figsize=(12, 6))
plt.title("Value Counts of The Categories Variable")
sns.set(style="darkgrid")
ax = sns.countplot(x="listed_in", data=data, palette="Pastel2", order=data["listed_in"].value_counts().iloc[:5].index)

# Add counts on top of the bars
for p in ax.patches:
    ax.annotate(format(p.get_height(), '.0f'),
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha = 'center', va = 'center',
                xytext = (0, 10),
                textcoords = 'offset points')

plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

df_barh = data['listed_in'].str.split(', ').explode().value_counts()
plt.figure(figsize=(14,7))
sns.barplot(y=df_barh.index,x=df_barh.values,orient='horizontal')
plt.ylabel('Category')
plt.xlabel('Number of Shows')
plt.title('Shows Categories Available in Amazon Prime')
plt.show()

"""# **Conclusion**

This exploratory data analysis of Amazon Prime's content library reveals several interesting patterns and insights. The platform features a significantly higher number of movies compared to TV shows. A small group of directors and actors contribute to a large portion of the content, indicating recurring collaborations. The genres of drama, comedy, and action are the most prominent, reflecting viewer preferences. Content production has steadily increased over the years, peaking in the 2010s. Most shows originate from a few key countries, notably the United States, India, and the United Kingdom. The distribution of ratings shows a focus on content suitable for general and teenage audiences. Overall, Amazon Prime offers a diverse and expanding catalog, tailored to varied audience interests across regions and age groups.
"""